# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from tinvest.grpc import operations_pb2 as tinvest_dot_grpc_dot_operations__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tinvest/grpc/operations_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OperationsServiceStub(object):
    """С помощью методов сервиса можно получить:</br></br> **1**. Список операций по счёту.</br> **2**.
    Портфель по счёту.</br> **3**. Позиции ценных бумаг на счёте.</br> **4**.
    Доступный остаток для вывода средств.</br> **5**. Различные отчёты.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOperations = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.OperationsRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.OperationsResponse.FromString,
                _registered_method=True)
        self.GetPortfolio = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioResponse.FromString,
                _registered_method=True)
        self.GetPositions = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.PositionsRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.PositionsResponse.FromString,
                _registered_method=True)
        self.GetWithdrawLimits = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsResponse.FromString,
                _registered_method=True)
        self.GetBrokerReport = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.BrokerReportRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.BrokerReportResponse.FromString,
                _registered_method=True)
        self.GetDividendsForeignIssuer = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerResponse.FromString,
                _registered_method=True)
        self.GetOperationsByCursor = channel.unary_unary(
                '/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorResponse.FromString,
                _registered_method=True)


class OperationsServiceServicer(object):
    """С помощью методов сервиса можно получить:</br></br> **1**. Список операций по счёту.</br> **2**.
    Портфель по счёту.</br> **3**. Позиции ценных бумаг на счёте.</br> **4**.
    Доступный остаток для вывода средств.</br> **5**. Различные отчёты.
    """

    def GetOperations(self, request, context):
        """Получить список операций по счёту. При работе с методом учитывайте
        [особенности взаимодействия](/investAPI/operations_problems).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """Получить портфель по счёту.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPositions(self, request, context):
        """Получить список позиций по счёту.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWithdrawLimits(self, request, context):
        """Получить доступный остаток для вывода средств.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBrokerReport(self, request, context):
        """Получить брокерский отчёт.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDividendsForeignIssuer(self, request, context):
        """Получить отчёт «Справка о доходах за пределами РФ».
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOperationsByCursor(self, request, context):
        """Получить список операций по счёту с пагинацией. При работе с методом учитывайте
        [особенности взаимодействия](/investAPI/operations_problems).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperationsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOperations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOperations,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.OperationsRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.OperationsResponse.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioResponse.SerializeToString,
            ),
            'GetPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPositions,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.PositionsRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.PositionsResponse.SerializeToString,
            ),
            'GetWithdrawLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWithdrawLimits,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsResponse.SerializeToString,
            ),
            'GetBrokerReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBrokerReport,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.BrokerReportRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.BrokerReportResponse.SerializeToString,
            ),
            'GetDividendsForeignIssuer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDividendsForeignIssuer,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerResponse.SerializeToString,
            ),
            'GetOperationsByCursor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOperationsByCursor,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tinkoff.public.invest.api.contract.v1.OperationsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tinkoff.public.invest.api.contract.v1.OperationsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OperationsService(object):
    """С помощью методов сервиса можно получить:</br></br> **1**. Список операций по счёту.</br> **2**.
    Портфель по счёту.</br> **3**. Позиции ценных бумаг на счёте.</br> **4**.
    Доступный остаток для вывода средств.</br> **5**. Различные отчёты.
    """

    @staticmethod
    def GetOperations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperations',
            tinvest_dot_grpc_dot_operations__pb2.OperationsRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.OperationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetPortfolio',
            tinvest_dot_grpc_dot_operations__pb2.PortfolioRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.PortfolioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetPositions',
            tinvest_dot_grpc_dot_operations__pb2.PositionsRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.PositionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWithdrawLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetWithdrawLimits',
            tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.WithdrawLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBrokerReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetBrokerReport',
            tinvest_dot_grpc_dot_operations__pb2.BrokerReportRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.BrokerReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDividendsForeignIssuer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetDividendsForeignIssuer',
            tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.GetDividendsForeignIssuerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOperationsByCursor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsService/GetOperationsByCursor',
            tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.GetOperationsByCursorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OperationsStreamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PortfolioStream = channel.unary_stream(
                '/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamResponse.FromString,
                _registered_method=True)
        self.PositionsStream = channel.unary_stream(
                '/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream',
                request_serializer=tinvest_dot_grpc_dot_operations__pb2.PositionsStreamRequest.SerializeToString,
                response_deserializer=tinvest_dot_grpc_dot_operations__pb2.PositionsStreamResponse.FromString,
                _registered_method=True)


class OperationsStreamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PortfolioStream(self, request, context):
        """Server-side stream обновлений портфеля.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PositionsStream(self, request, context):
        """Server-side stream обновлений информации по изменению позиций портфеля.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperationsStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PortfolioStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PortfolioStream,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamResponse.SerializeToString,
            ),
            'PositionsStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PositionsStream,
                    request_deserializer=tinvest_dot_grpc_dot_operations__pb2.PositionsStreamRequest.FromString,
                    response_serializer=tinvest_dot_grpc_dot_operations__pb2.PositionsStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tinkoff.public.invest.api.contract.v1.OperationsStreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tinkoff.public.invest.api.contract.v1.OperationsStreamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OperationsStreamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PortfolioStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PortfolioStream',
            tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.PortfolioStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PositionsStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tinkoff.public.invest.api.contract.v1.OperationsStreamService/PositionsStream',
            tinvest_dot_grpc_dot_operations__pb2.PositionsStreamRequest.SerializeToString,
            tinvest_dot_grpc_dot_operations__pb2.PositionsStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
